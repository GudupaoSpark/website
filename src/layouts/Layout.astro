---
import '../styles/global.css';
import Header from '../components/Header.astro';
import ThemeModal from '../components/ThemeModal.astro';
import LanguageModal from '../components/LanguageModal.astro';
import Footer from '../components/Footer.astro';
import SmartPrefetch from '../components/SmartPrefetch.astro';
import ResourceOptimizer from '../components/ResourceOptimizer.astro';
import PerformanceMonitor from '../components/PerformanceMonitor.astro';
import { getTranslator } from '@gudupao/astro-i18n';
import { ClientRouter } from 'astro:transitions';
const lang = Astro.params.lang || 'en';
const t = getTranslator(lang);
const pageTitle = Astro.props.title || t('layout.title');
const showFooter = Astro.props.showFooter !== false;
---

<!doctype html>
<html lang="en" class="transition-colors duration-300">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="description" content={t('layout.description')} />
		<link rel="icon" type="image/png" href="/icon/icon.png" sizes="32x32" />
		<link rel="icon" type="image/png" href="/icon/icon.png" sizes="16x16" />
		<link rel="apple-touch-icon" href="/icon/icon.png" />
		<meta name="generator" content={Astro.generator} />
	<title>{pageTitle}</title>
		<ClientRouter />
		<!-- Apply theme immediately to prevent flash -->
		<script is:inline>
			(function() {
				// Get device-appropriate theme
				const isMobile = window.innerWidth < 768;
				const theme = isMobile ?
					localStorage.getItem('theme-mobile') || 'light' :
					localStorage.getItem('theme') || 'system';
				const html = document.documentElement;

				if (theme === 'dark') {
					html.classList.add('dark');
				} else if (theme === 'light') {
					html.classList.remove('dark');
				} else {
					// System theme
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						html.classList.add('dark');
					} else {
						html.classList.remove('dark');
					}
				}
			})();
		</script>
		<script is:inline>
			document.addEventListener('keydown', function(e) {
				if (e.ctrlKey && e.key === 'a') {
					e.preventDefault();
					const selection = window.getSelection();
					const range = document.createRange();
					const textNodes = [];

					function getTextNodes(node) {
						if (node.nodeType === Node.TEXT_NODE) {
							if (node.textContent.trim()) {
								textNodes.push(node);
							}
						} else {
							for (let child of node.childNodes) {
								getTextNodes(child);
							}
						}
					}

					getTextNodes(document.body);

					if (textNodes.length > 0) {
						range.setStart(textNodes[0], 0);
						range.setEnd(textNodes[textNodes.length - 1], textNodes[textNodes.length - 1].textContent.length);
						selection.removeAllRanges();
						selection.addRange(range);
					}
				}
			});
		</script>
	</head>
	<body class="bg-white dark:bg-slate-900 text-gray-900 dark:text-gray-100 transition-colors duration-300 flex flex-col min-h-screen">
		<Header lang={lang} />
		<main>
			<slot />
		</main>
		<ThemeModal />
		<LanguageModal />
		{showFooter && <Footer lang={lang} />}
		<SmartPrefetch />
		<ResourceOptimizer />
		<PerformanceMonitor />
	</body>
</html>

<script>
	// Global theme re-initialization function
	function reinitializeTheme() {
		// Re-apply theme based on device type
		const isMobile = window.innerWidth < 768;
		const theme = isMobile ? 
			localStorage.getItem('theme-mobile') || 'light' : 
			localStorage.getItem('theme') || 'system';
		const html = document.documentElement;

		if (theme === 'dark') {
			html.classList.add('dark');
		} else if (theme === 'light') {
			html.classList.remove('dark');
		} else {
			// System theme
			if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
				html.classList.add('dark');
			} else {
				html.classList.remove('dark');
			}
		}
		console.log('Theme reinitialized:', theme, 'Mobile:', isMobile);
	}

	document.addEventListener('astro:after-swap', () => {
		// Scroll to top smoothly after navigation
		window.scrollTo({ top: 0, behavior: 'smooth' });
	});

	// Ensure all internal links use client-side navigation
	document.addEventListener('astro:page-load', () => {
		// Get all links on the page
		const links = document.querySelectorAll('a[href^="/"]');
		links.forEach(link => {
			// Make sure they don't have target="_blank" or download attributes
			if (!link.hasAttribute('target') && !link.hasAttribute('download')) {
				// Force client-side navigation by removing data-astro-reload if it exists
				link.removeAttribute('data-astro-reload');
			}
		});
	});

	// Handle language-prefixed links for SPA navigation
	document.addEventListener('astro:page-load', () => {
		const pathParts = window.location.pathname.split('/').filter(p => p);
		const currentLang = pathParts[0] || 'en';
		const links = document.querySelectorAll('a[href^="/"]');
		links.forEach(link => {
			const href = link.getAttribute('href');
			if (href && href !== '/' && !href.startsWith('#') && !href.startsWith(`/${currentLang}`)) {
				// Prepend current language to internal links
				link.setAttribute('href', `/${currentLang}${href}`);
			}
		});
	});

	// Fix root path links to include language
	document.addEventListener('astro:page-load', () => {
		const pathParts = window.location.pathname.split('/').filter(p => p);
		const currentLang = pathParts[0] || 'en';
		const rootLinks = document.querySelectorAll('a[href="/"]');
		rootLinks.forEach(link => {
			link.setAttribute('href', `/${currentLang}`);
		});
	});

	// Prevent browser's default scroll restoration
	if ('scrollRestoration' in history) {
		history.scrollRestoration = 'manual';
	}

	// 滑动到底部后禁止继续往下滑动
	function preventScrollBeyondBottom() {
		// 防止页面滚动到底部后继续往下滑动
		function checkScrollPosition() {
			const scrollPosition = window.scrollY;
			const maxScrollPosition = document.documentElement.scrollHeight - window.innerHeight;
			const tolerance = 5; // 容忍误差范围

			// 如果滚动位置超过最大滚动位置，则强制设置到最大位置
			if (scrollPosition > maxScrollPosition + tolerance) {
				window.scrollTo({
					top: maxScrollPosition,
					behavior: 'smooth'
				});
				return false; // 阻止默认滚动行为
			}
			return true; // 允许正常滚动
		}

		// 监听滚动事件
		window.addEventListener('scroll', checkScrollPosition, { passive: false });

		// 监听触摸滚动事件（移动设备）
		let startY = 0;
		window.addEventListener('touchstart', (e) => {
			startY = e.touches[0].clientY;
		}, { passive: true });

		window.addEventListener('touchmove', (e) => {
			const currentY = e.touches[0].clientY;
			const scrollPosition = window.scrollY;
			const maxScrollPosition = document.documentElement.scrollHeight - window.innerHeight;

			// 如果试图向下滚动且已经到底部，则阻止滚动
			if (currentY > startY && scrollPosition >= maxScrollPosition) {
				e.preventDefault();
			}
		}, { passive: false });

		// 监听滚轮事件
		window.addEventListener('wheel', (e) => {
			const scrollPosition = window.scrollY;
			const maxScrollPosition = document.documentElement.scrollHeight - window.innerHeight;
			
			// 如果试图向下滚动且已经到底部，则阻止滚动
			if (e.deltaY > 0 && scrollPosition >= maxScrollPosition) {
				e.preventDefault();
			}
		}, { passive: false });
	}

	// 页面加载完成后启用滚动限制
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', preventScrollBeyondBottom);
	} else {
		preventScrollBeyondBottom();
	}

	// 页面导航后重新启用滚动限制
	document.addEventListener('astro:after-swap', () => {
		setTimeout(preventScrollBeyondBottom, 100);
	});

	// Listen for theme changes
	window.addEventListener('storage', (e) => {
		if (e.key === 'theme' || e.key === 'theme-mobile') {
			setTimeout(reinitializeTheme, 100);
		}
	});

	// Re-initialize theme after page transitions
	document.addEventListener('astro:after-swap', () => {
		setTimeout(reinitializeTheme, 100);
	});
</script>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}

	main {
		position: relative;
	}

	/* View Transitions Animations - Optimized */
	@view-transition {
		navigation: auto;
	}

	/* Use will-change for better performance */
	::view-transition-old(root),
	::view-transition-new(root) {
		will-change: transform, opacity;
	}

	/* Faster, more efficient slide animation - reduced to 0.25s */
	::view-transition-old(root) {
		animation: slide-out-left 0.25s cubic-bezier(0.4, 0, 0.2, 1);
	}

	::view-transition-new(root) {
		animation: slide-in-right 0.25s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Optimized slide animations with reduced distance */
	@keyframes slide-out-left {
		from {
			transform: translateX(0);
			opacity: 1;
		}
		to {
			transform: translateX(-10px);
			opacity: 0;
		}
	}

	@keyframes slide-in-right {
		from {
			transform: translateX(10px);
			opacity: 0;
		}
		to {
			transform: translateX(0);
			opacity: 1;
		}
	}

	/* Keep header and footer in place during transitions - optimized */
	::view-transition-old(header-bar),
	::view-transition-new(header-bar),
	::view-transition-old(footer-bar),
	::view-transition-new(footer-bar) {
		animation: none;
		mix-blend-mode: normal;
		transform: none;
	}

	/* Reduce motion for users with motion sensitivity */
	@media (prefers-reduced-motion: reduce) {
		::view-transition-old(root),
		::view-transition-new(root) {
			animation-duration: 0.1s;
		}
	}
</style>
