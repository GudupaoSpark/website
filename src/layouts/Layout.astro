---
import '../styles/global.css';
import Header from '../components/Header.astro';
import ThemeModal from '../components/ThemeModal.astro';
import LanguageModal from '../components/LanguageModal.astro';
import Footer from '../components/Footer.astro';
import { getTranslator } from '@gudupao/astro-i18n';
import { ClientRouter } from 'astro:transitions';
const lang = Astro.params.lang || 'en';
const t = getTranslator(lang);
const pageTitle = Astro.props.title || t('layout.title');
---

<!doctype html>
<html lang="en" class="transition-colors duration-300">
	<head>
		<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width" />
		<meta name="description" content={t('layout.description')} />
		<link rel="icon" type="image/png" href="/icon/icon.png" sizes="32x32" />
		<link rel="icon" type="image/png" href="/icon/icon.png" sizes="16x16" />
		<link rel="apple-touch-icon" href="/icon/icon.png" />
		<meta name="generator" content={Astro.generator} />
	<title>{pageTitle}</title>
		<ClientRouter />
		<!-- Apply theme immediately to prevent flash -->
		<script is:inline>
			(function() {
				const theme = localStorage.getItem('theme') || 'system';
				const html = document.documentElement;

				if (theme === 'dark') {
					html.classList.add('dark');
				} else if (theme === 'light') {
					html.classList.remove('dark');
				} else {
					// System theme
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						html.classList.add('dark');
					} else {
						html.classList.remove('dark');
					}
				}
			})();
		</script>
		<script is:inline>
			document.addEventListener('keydown', function(e) {
				if (e.ctrlKey && e.key === 'a') {
					e.preventDefault();
					const selection = window.getSelection();
					const range = document.createRange();
					const textNodes = [];

					function getTextNodes(node) {
						if (node.nodeType === Node.TEXT_NODE) {
							if (node.textContent.trim()) {
								textNodes.push(node);
							}
						} else {
							for (let child of node.childNodes) {
								getTextNodes(child);
							}
						}
					}

					getTextNodes(document.body);

					if (textNodes.length > 0) {
						range.setStart(textNodes[0], 0);
						range.setEnd(textNodes[textNodes.length - 1], textNodes[textNodes.length - 1].textContent.length);
						selection.removeAllRanges();
						selection.addRange(range);
					}
				}
			});
		</script>
	</head>
	<body class="bg-white dark:bg-slate-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
		<Header />
		<main>
			<slot />
		</main>
		<ThemeModal />
		<LanguageModal />
	<Footer />
	</body>
</html>

<script>
	document.addEventListener('astro:after-swap', () => {
		// Scroll to top smoothly after navigation
		window.scrollTo({ top: 0, behavior: 'smooth' });
	});

	// Ensure all internal links use client-side navigation
	document.addEventListener('astro:page-load', () => {
		// Get all links on the page
		const links = document.querySelectorAll('a[href^="/"]');
		links.forEach(link => {
			// Make sure they don't have target="_blank" or download attributes
			if (!link.hasAttribute('target') && !link.hasAttribute('download')) {
				// Force client-side navigation by removing data-astro-reload if it exists
				link.removeAttribute('data-astro-reload');
			}
		});
	});

	// Handle language-prefixed links for SPA navigation
	document.addEventListener('astro:page-load', () => {
		const pathParts = window.location.pathname.split('/').filter(p => p);
		const currentLang = pathParts[0] || 'en';
		const links = document.querySelectorAll('a[href^="/"]');
		links.forEach(link => {
			const href = link.getAttribute('href');
			if (href && href !== '/' && !href.startsWith('#') && !href.startsWith(`/${currentLang}`)) {
				// Prepend current language to internal links
				link.setAttribute('href', `/${currentLang}${href}`);
			}
		});
	});

	// Fix root path links to include language
	document.addEventListener('astro:page-load', () => {
		const pathParts = window.location.pathname.split('/').filter(p => p);
		const currentLang = pathParts[0] || 'en';
		const rootLinks = document.querySelectorAll('a[href="/"]');
		rootLinks.forEach(link => {
			link.setAttribute('href', `/${currentLang}`);
		});
	});

	// Prevent browser's default scroll restoration
	if ('scrollRestoration' in history) {
		history.scrollRestoration = 'manual';
	}
</script>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}

	main {
		position: relative;
	}

	/* View Transitions Animations */
	@view-transition {
		navigation: auto;
	}

	/* Prevent default fade, use custom slide animation */
	::view-transition-old(root) {
		animation: slide-out-left 0.4s cubic-bezier(0.4, 0, 0.2, 1);
	}

	::view-transition-new(root) {
		animation: slide-in-right 0.4s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Slide animations */
	@keyframes slide-out-left {
		from {
			transform: translateX(0);
			opacity: 1;
		}
		to {
			transform: translateX(-20px);
			opacity: 0;
		}
	}

	@keyframes slide-in-right {
		from {
			transform: translateX(20px);
			opacity: 0;
		}
		to {
			transform: translateX(0);
			opacity: 1;
		}
	}

	/* Keep header and footer in place during transitions */
	::view-transition-old(header-bar),
	::view-transition-new(header-bar),
	::view-transition-old(footer-bar),
	::view-transition-new(footer-bar) {
		animation: none;
		mix-blend-mode: normal;
	}
</style>
