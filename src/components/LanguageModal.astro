---
// Language Modal Component
import { getTranslator } from '@gudupao/astro-i18n';
const lang = Astro.params.lang || 'en';
const t = getTranslator(lang);
---

<div id="language-modal" class="fixed inset-0 z-50 hidden">
  <!-- Overlay -->
  <div id="language-modal-overlay" class="absolute inset-0 bg-black/50 dark:bg-black/70 backdrop-blur-sm transition-colors duration-300"></div>

  <!-- Modal Content -->
  <div id="language-modal-content" class="absolute bottom-0 left-0 right-0 rounded-t-3xl p-6 shadow-2xl transform translate-y-full transition-all duration-300 ease-out border-t-2 border-gray-200 dark:border-gray-500" style="background-color: var(--modal-bg);">
    <div class="flex justify-center mb-6">
      <div class="w-12 h-1 bg-gray-300 dark:bg-gray-500 rounded-full transition-colors duration-300"></div>
    </div>

    <h3 class="text-lg font-roboto font-bold text-center mb-8 transition-colors duration-300" style="color: var(--modal-text);">{t('modal.chooseLanguage')}</h3>

    <!-- Language Options -->
    <div class="grid grid-cols-2 gap-4 mb-6">
      <button id="lang-en" class="language-btn flex items-center space-x-3 p-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 hover:border-blue-500 dark:hover:border-blue-400 transition-all duration-200 bg-transparent hover:bg-blue-50 dark:hover:bg-blue-900/20" style="color: var(--modal-text);" onmouseover="this.style.color='black'" onmouseout="this.style.color='var(--modal-text)'">
        <span class="text-xl flag-emoji">ðŸ‡ºðŸ‡¸</span>
        <span class="font-roboto font-medium transition-colors duration-300">{t('languages.en')}</span>
      </button>

      <button id="lang-es" class="language-btn flex items-center space-x-3 p-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 hover:border-blue-500 dark:hover:border-blue-400 transition-all duration-200 bg-transparent hover:bg-blue-50 dark:hover:bg-blue-900/20" style="color: var(--modal-text);" onmouseover="this.style.color='black'" onmouseout="this.style.color='var(--modal-text)'">
        <span class="text-xl flag-emoji">ðŸ‡ªðŸ‡¸</span>
        <span class="font-roboto font-medium transition-colors duration-300">{t('languages.es')}</span>
      </button>

      <button id="lang-fr" class="language-btn flex items-center space-x-3 p-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 hover:border-blue-500 dark:hover:border-blue-400 transition-all duration-200 bg-transparent hover:bg-blue-50 dark:hover:bg-blue-900/20" style="color: var(--modal-text);" onmouseover="this.style.color='black'" onmouseout="this.style.color='var(--modal-text)'">
        <span class="text-xl flag-emoji">ðŸ‡«ðŸ‡·</span>
        <span class="font-roboto font-medium transition-colors duration-300">{t('languages.fr')}</span>
      </button>

      <button id="lang-ja" class="language-btn flex items-center space-x-3 p-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 hover:border-blue-500 dark:hover:border-blue-400 transition-all duration-200 bg-transparent hover:bg-blue-50 dark:hover:bg-blue-900/20" style="color: var(--modal-text);" onmouseover="this.style.color='black'" onmouseout="this.style.color='var(--modal-text)'">
        <span class="text-xl flag-emoji">ðŸ‡¯ðŸ‡µ</span>
        <span class="font-roboto font-medium transition-colors duration-300">{t('languages.ja')}</span>
      </button>

      <button id="lang-kr" class="language-btn flex items-center space-x-3 p-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 hover:border-blue-500 dark:hover:border-blue-400 transition-all duration-200 bg-transparent hover:bg-blue-50 dark:hover:bg-blue-900/20" style="color: var(--modal-text);" onmouseover="this.style.color='black'" onmouseout="this.style.color='var(--modal-text)'">
        <span class="text-xl flag-emoji">ðŸ‡°ðŸ‡·</span>
        <span class="font-roboto font-medium transition-colors duration-300">{t('languages.kr')}</span>
      </button>

      <button id="lang-zh-hans" class="language-btn flex items-center space-x-3 p-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 hover:border-blue-500 dark:hover:border-blue-400 transition-all duration-200 bg-transparent hover:bg-blue-50 dark:hover:bg-blue-900/20" style="color: var(--modal-text);" onmouseover="this.style.color='black'" onmouseout="this.style.color='var(--modal-text)'">
        <span class="text-xl flag-emoji">ðŸ‡¨ðŸ‡³</span>
        <span class="font-roboto font-medium transition-colors duration-300">{t('languages.zh-hans')}</span>
      </button>

      <button id="lang-zh-hant" class="language-btn flex items-center space-x-3 p-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 hover:border-blue-500 dark:hover:border-blue-400 transition-all duration-200 bg-transparent hover:bg-blue-50 dark:hover:bg-blue-900/20" style="color: var(--modal-text);" onmouseover="this.style.color='black'" onmouseout="this.style.color='var(--modal-text)'">
        <span class="text-xl flag-emoji">ðŸ‡­ðŸ‡°</span>
        <span class="font-roboto font-medium transition-colors duration-300">{t('languages.zh-hant')}</span>
      </button>

      <button id="lang-th" class="language-btn flex items-center space-x-3 p-4 rounded-xl border-2 border-gray-200 dark:border-gray-600 hover:border-blue-500 dark:hover:border-blue-400 transition-all duration-200 bg-transparent hover:bg-blue-50 dark:hover:bg-blue-900/20" style="color: var(--modal-text);" onmouseover="this.style.color='black'" onmouseout="this.style.color='var(--modal-text)'">
        <span class="text-xl flag-emoji">ðŸ‡¹ðŸ‡­</span>
        <span class="font-roboto font-medium transition-colors duration-300">{t('languages.th')}</span>
      </button>
    </div>
  </div>
</div>

<script>
  // Language modal functionality - Optimized
  class LanguageModal {
    modal: HTMLElement | null;
    overlay: HTMLElement | null;
    content: HTMLElement | null;
    toggleBtn: HTMLElement | null;
    currentLang: string;
    private isAnimating: boolean = false;

    constructor() {
      this.modal = document.getElementById('language-modal');
      this.overlay = document.getElementById('language-modal-overlay');
      this.content = document.getElementById('language-modal-content');
      this.toggleBtn = document.getElementById('language-toggle');
      this.currentLang = this.getCurrentLang();

      this.init();
    }

    getCurrentLang() {
      const path = window.location.pathname;
      const match = path.match(/^\/([a-z]{2}(-[a-z]{2})?)/);
      return match ? match[1] : 'en';
    }

    init() {
      // Use event delegation instead of multiple listeners
      this.toggleBtn?.addEventListener('click', () => this.show(), { passive: true });
      this.overlay?.addEventListener('click', () => this.hide(), { passive: true });

      // Single delegated event listener for all language buttons
      const languageButtons = this.modal?.querySelector('.grid');
      languageButtons?.addEventListener('click', (e) => {
        const button = (e.target as HTMLElement).closest('.language-btn');
        if (button) {
          const lang = button.id.replace('lang-', '');
          this.setLanguage(lang);
        }
      }, { passive: true });

      // Update active button on load
      this.updateActiveButton(this.currentLang);
    }

    show() {
      if (this.isAnimating) return;
      this.isAnimating = true;

      this.modal?.classList.remove('hidden');

      // Use requestAnimationFrame for smooth animation
      requestAnimationFrame(() => {
        this.content?.classList.remove('translate-y-full');
        setTimeout(() => {
          this.isAnimating = false;
        }, 300);
      });
    }

    hide() {
      if (this.isAnimating) return;
      this.isAnimating = true;

      this.content?.classList.add('translate-y-full');
      setTimeout(() => {
        this.modal?.classList.add('hidden');
        this.isAnimating = false;
      }, 300);
    }

    setLanguage(lang: string) {
      if (lang === this.currentLang) {
        this.hide();
        return;
      }

      // Get current path without language prefix
      const currentPath = window.location.pathname;
      const pathWithoutLang = currentPath.replace(/^\/([a-z]{2}(-[a-z]{2})?)+/, '') || '/';

      // Redirect to new language path
      window.location.href = `/${lang}${pathWithoutLang}`;
    }

    updateActiveButton(lang: string) {
      // Use single batch DOM update
      const buttons = this.modal?.querySelectorAll('.language-btn');
      const activeBtn = document.getElementById(`lang-${lang}`);

      buttons?.forEach(btn => {
        if (btn === activeBtn) {
          btn.classList.remove('border-gray-200', 'dark:border-gray-600');
          btn.classList.add('border-blue-500', 'dark:border-blue-400', 'bg-blue-50', 'dark:bg-blue-900/20');
        } else {
          btn.classList.remove('border-blue-500', 'dark:border-blue-400', 'bg-blue-50', 'dark:bg-blue-900/20');
          btn.classList.add('border-gray-200', 'dark:border-gray-600');
        }
      });
    }
  }

  // Optimize twemoji loading
  let twemojiLoadPromise: Promise<void> | null = null;

  function loadTwemoji(): Promise<void> {
    if (twemojiLoadPromise) return twemojiLoadPromise;

    if ((window as any).twemojiLoaded) {
      return Promise.resolve();
    }

    twemojiLoadPromise = new Promise((resolve) => {
      const script = document.createElement('script');
      script.src = 'https://unpkg.com/twemoji@14.0.2/dist/twemoji.min.js';
      script.async = true;
      script.onload = () => {
        (window as any).twemojiLoaded = true;
        resolve();
      };
      document.head.appendChild(script);
    });

    return twemojiLoadPromise;
  }

  // Function to apply modal twemoji styles - optimized
  function applyModalTwemojiStyles() {
    if (document.getElementById('twemoji-modal-styles')) return;

    const style = document.createElement('style');
    style.id = 'twemoji-modal-styles';
    style.textContent = `.twemoji-flag{width:1.25rem!important;height:1.25rem!important}`;
    document.head.appendChild(style);
  }

  // Function to parse modal twemoji - optimized
  async function parseModalTwemoji() {
    await loadTwemoji();

    if (typeof (window as any).twemoji !== 'undefined') {
      const modal = document.getElementById('language-modal');
      if (modal) {
        (window as any).twemoji.parse(modal, { className: 'twemoji-flag' });
        applyModalTwemojiStyles();
      }
    }
  }

  // Initialize language modal - optimized
  function initLanguageModal() {
    new LanguageModal();

    // Lazy load twemoji only when needed
    requestIdleCallback(() => {
      parseModalTwemoji();
    }, { timeout: 2000 });
  }

  // Run on initial page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLanguageModal);
  } else {
    initLanguageModal();
  }

  // Re-initialize after page transitions
  document.addEventListener('astro:after-swap', initLanguageModal);
</script>