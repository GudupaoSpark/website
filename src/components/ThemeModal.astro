---
// Theme Modal Component
---

<div id="theme-modal" class="fixed inset-0 z-50 hidden">
  <!-- Overlay -->
  <div id="modal-overlay" class="absolute inset-0 bg-black/50 dark:bg-black/70 backdrop-blur-sm transition-colors duration-300"></div>

  <!-- Modal Content -->
  <div id="modal-content" class="absolute bottom-0 left-0 right-0 rounded-t-3xl p-6 shadow-2xl transform translate-y-full transition-all duration-300 ease-out border-t-2 border-gray-200 dark:border-gray-500" style="background-color: var(--modal-bg);">
    <div class="flex justify-center mb-6">
      <div class="w-12 h-1 bg-gray-300 dark:bg-gray-500 rounded-full transition-colors duration-300"></div>
    </div>

    <h3 class="text-lg font-roboto font-bold text-center mb-8 transition-colors duration-300" style="color: var(--modal-text);">Choose Theme</h3>

    <!-- Semi-circular Theme Selector -->
    <div class="relative w-64 h-32 mx-auto mb-6">
      <!-- Semi-circle background -->
      <div class="absolute inset-0">
        <svg class="w-full h-full" viewBox="0 0 256 128">
          <path d="M 16 112 A 96 96 0 0 1 240 112" fill="none" stroke="currentColor" stroke-width="2" class="text-gray-300 dark:text-gray-300 transition-colors duration-300"/>
        </svg>
      </div>

       <!-- Moving ball (centered on arc line, behind buttons) -->
          <div id="theme-ball" class="absolute w-8 h-8
          -   rounded-full bg-blue-500 dark:bg-blue-200 shadow-lg transition-all 
          -  duration-500 ease-out z-0 border-2 border-white dark:border-gray-100" 
          -  style="transform: translate(112px, -16px);"></div>

      <!-- Theme positions on the arc (centered on arc, above ball) -->
      <button id="light-mode" class="theme-btn absolute w-12 h-12 rounded-full bg-yellow-400 hover:bg-yellow-500 dark:bg-yellow-300 dark:hover:bg-yellow-400 flex items-center justify-center transition-all duration-200 z-10 shadow-lg ring-0 ring-blue-500 border-2 border-white dark:border-gray-100" style="transform: translate(8px, 88px);">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
        </svg>
      </button>

      <button id="system-mode" class="theme-btn absolute w-12 h-12 rounded-full bg-gray-500 hover:bg-gray-600 dark:bg-gray-500 dark:hover:bg-gray-400 flex items-center justify-center transition-all duration-200 z-10 shadow-lg ring-0 ring-blue-500 border-2 border-white dark:border-gray-100" style="transform: translate(104px, -8px);">
        <svg class="icon" viewBox="0 0 1028 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" width="20" height="20"><path d="M581.12 753.28v137.6h206.72a34.56 34.56 0 1 1 0 69.12H305.28a34.56 34.56 0 1 1 0-69.12H512v-137.6H201.6A137.6 137.6 0 0 1 64 615.68V201.6A137.6 137.6 0 0 1 201.6 64h689.28a137.6 137.6 0 0 1 137.6 137.6v414.08a137.6 137.6 0 0 1-137.6 137.6zM201.6 133.12a69.76 69.76 0 0 0-68.48 68.48v414.08a69.76 69.76 0 0 0 69.12 69.12h688.64A69.76 69.76 0 0 0 960 615.68V201.6a69.76 69.76 0 0 0-69.12-69.12z" fill="#ffffff"></path></svg>
      </button>

      <button id="dark-mode" class="theme-btn absolute w-12 h-12 rounded-full bg-slate-800 hover:bg-slate-900 dark:bg-slate-600 dark:hover:bg-slate-500 flex items-center justify-center transition-all duration-200 z-10 shadow-lg ring-0 ring-blue-500 border-2 border-white dark:border-gray-100" style="transform: translate(200px, 88px);">
        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
          <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
        </svg>
      </button>
    </div>

    <!-- Labels -->
    <div class="flex justify-between px-8 text-sm font-roboto font-bold transition-colors duration-300" style="color: var(--modal-text);">
      <span>Light</span>
      <span>System</span>
      <span>Dark</span>
    </div>
  </div>
</div>


<script>
  // Theme modal functionality
  class ThemeModal {
    modal: HTMLElement | null;
    overlay: HTMLElement | null;
    content: HTMLElement | null;
    toggleBtn: HTMLElement | null;
    currentTheme: string;

    constructor() {
      this.modal = document.getElementById('theme-modal');
      this.overlay = document.getElementById('modal-overlay');
      this.content = document.getElementById('modal-content');
      this.toggleBtn = document.getElementById('theme-toggle');
      this.currentTheme = 'system'; // default

      this.init();
    }

    init() {
      // Show modal
      this.toggleBtn?.addEventListener('click', () => this.show());

      // Hide modal on overlay click
      this.overlay?.addEventListener('click', () => this.hide());

      // Theme selection
      document.getElementById('light-mode')?.addEventListener('click', () => this.setTheme('light'));
      document.getElementById('system-mode')?.addEventListener('click', () => this.setTheme('system'));
      document.getElementById('dark-mode')?.addEventListener('click', () => this.setTheme('dark'));

      // Hover effects for theme buttons
      const ball = document.getElementById('theme-ball');
      document.querySelectorAll('.theme-btn').forEach(btn => {
        btn.addEventListener('mouseenter', (e) => {
          const target = e.target as HTMLElement;
          const buttonTheme = target.id.replace('-mode', '');

          // If hovering over the current theme button, scale the ball instead
          if (buttonTheme === this.currentTheme && ball) {
            ball.style.transform = ball.style.transform.replace('scale(1)', 'scale(1.3)');
            if (!ball.style.transform.includes('scale')) {
              ball.style.transform += ' scale(1.3)';
            } else {
              ball.style.transform = ball.style.transform.replace(/scale\([^)]+\)/, 'scale(1.3)');
            }
          } else {
            // Otherwise scale the button
            target.style.transform = target.style.transform + ' scale(1.1)';
          }
        });

        btn.addEventListener('mouseleave', (e) => {
          const target = e.target as HTMLElement;
          const buttonTheme = target.id.replace('-mode', '');

          if (buttonTheme === this.currentTheme && ball) {
            // Reset ball scale
            ball.style.transform = ball.style.transform.replace(/scale\([^)]+\)/, 'scale(1)');
          } else {
            // Reset button scale - extract original transform
            const match = target.getAttribute('style')?.match(/transform:\s*translate\([^)]+\)/);
            if (match) {
              target.style.transform = match[0].replace('transform: ', '');
            }
          }
        });
      });

      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
        if (this.currentTheme === 'system') {
          this.applyTheme('system');
        }
      });
    }

    show() {
      this.modal?.classList.remove('hidden');
      setTimeout(() => {
        this.content?.classList.remove('translate-y-full');
        this.updateActiveButton(this.currentTheme);
      }, 10);
    }

    hide() {
      this.content?.classList.add('translate-y-full');
      setTimeout(() => {
        this.modal?.classList.add('hidden');
      }, 300);
    }

    setTheme(theme: string) {
      localStorage.setItem('theme', theme);
      this.applyTheme(theme);
      this.moveBallAlongArc(this.currentTheme, theme);
      this.updateActiveButton(theme);
      this.currentTheme = theme;
      // Delay hiding the modal to allow animation to complete
      setTimeout(() => {
        this.hide();
      }, 600); // Match animation duration
    }

    updateActiveButton(theme: string) {
      // Remove ring from all buttons
      document.querySelectorAll('.theme-btn').forEach(btn => {
        btn.classList.remove('ring-4', 'ring-blue-500', 'dark:ring-blue-400');
      });

      // Add ring to active button
      const activeBtn = document.getElementById(`${theme}-mode`);
      if (activeBtn) {
        activeBtn.classList.add('ring-4', 'ring-blue-500', 'dark:ring-blue-400');
      }
    }

    moveBallAlongArc(fromTheme: string, toTheme: string) {
      const ball = document.getElementById('theme-ball');
      if (!ball || fromTheme === toTheme) return;

      // Arc parameters (matching the SVG path)
      const centerX = 128;
      const centerY = 112;
      const radius = 96;

      // Define angles for each position (in radians)
      const angles: Record<string, number> = {
        light: Math.PI,      // 180 degrees (left)
        system: Math.PI / 2, // 90 degrees (top)
        dark: 0              // 0 degrees (right)
      };

      const fromAngle = angles[fromTheme];
      const toAngle = angles[toTheme];

      // Create keyframes for arc animation
      const keyframes = [];
      const steps = 20;

      for (let i = 0; i <= steps; i++) {
        const t = i / steps;
        // Smooth easing function (ease-out)
        const eased = 1 - Math.pow(1 - t, 3);

        // Interpolate angle
        const currentAngle = fromAngle + (toAngle - fromAngle) * eased;

        // Calculate position on the circle
        const x = centerX + radius * Math.cos(currentAngle) - 16; // -16 to center the ball (half of ball size)
        const y = centerY - radius * Math.sin(currentAngle) - 16;

        keyframes.push(`${t * 100}% { transform: translate(${x}px, ${y}px); }`);
      }

      const animationName = `moveAlongArc${Date.now()}`;
      const style = document.createElement('style');
      style.textContent = `
        @keyframes ${animationName} {
          ${keyframes.join('\n')}
        }
        .${animationName} {
          animation: ${animationName} 0.6s ease-out forwards;
        }
      `;
      document.head.appendChild(style);

      // Remove previous animation classes
      ball.className = ball.className.replace(/moveAlongArc\d+/g, '').trim();

      // Add new animation
      ball.classList.add(animationName);

      // Clean up after animation
      setTimeout(() => {
        document.head.removeChild(style);
        ball.classList.remove(animationName);
        const finalX = centerX + radius * Math.cos(toAngle) - 16;
        const finalY = centerY - radius * Math.sin(toAngle) - 16;
        ball.style.transform = `translate(${finalX}px, ${finalY}px)`;
      }, 600);
    }

    applyTheme(theme: string) {
      const html = document.documentElement;

      if (theme === 'dark') {
        html.classList.add('dark');
      } else if (theme === 'light') {
        html.classList.remove('dark');
      } else {
        // System theme
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          html.classList.add('dark');
        } else {
          html.classList.remove('dark');
        }
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const modal = new ThemeModal();

    // Apply saved theme on load
    const savedTheme = localStorage.getItem('theme') || 'system';
    modal.currentTheme = savedTheme;
    modal.applyTheme(savedTheme);
    modal.moveBallAlongArc('system', savedTheme); // Animate from system to saved theme
    modal.updateActiveButton(savedTheme); // Show active theme indicator
  });
</script>